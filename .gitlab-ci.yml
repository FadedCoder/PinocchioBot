# Include rule to run pipelines for the default branch, tags, and merge requests
include:
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

stages:
  - test
  - build
  - release

.docker_env:
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

test:
  stage: test
  image: python:3.8

  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  cache:
    paths:
      - .cache/pip

  before_script:
    - python -V # Print out python version for debugging
    - pip install -r requirements.txt

  script:
    - scripts/test

build:docker:
  stage: build
  extends:
    - .docker_env
  script:
    - docker manifest inspect "$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA" >/dev/null && exit 0
    - docker build -t "$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA" --build-arg "GIT_SHA=$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true # Can merge PR then, otherwise blocked
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

release:docker:master:
  stage: release
  extends:
    - .docker_env
  script:
    - docker pull "$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
